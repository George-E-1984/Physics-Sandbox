//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b9516057-0e6d-46f6-b83e-e3b1816eaf3c"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""998b03e7-3587-4bea-9da6-778dab655c2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""db4dbded-2fea-4e15-b845-a70b58e3de0b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""a81a5bc6-79f0-4f65-a116-30681633010b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grabbing"",
                    ""type"": ""Button"",
                    ""id"": ""cd49adc8-653b-4d3b-98e5-b9e7ab7c24ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button Press"",
                    ""type"": ""Button"",
                    ""id"": ""c3ab59b6-8c5f-4481-b71a-6ee60f633f86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Taskbar Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""17b92fe6-950e-4420-9d57-2399bc5bbc4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Taskbar Release"",
                    ""type"": ""Button"",
                    ""id"": ""48cadf9e-75a2-4284-aba9-08a21b8d5660"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b08d4c2c-cd58-45fd-a9b6-b7430bbaeaab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Open Pause Menu"",
                    ""type"": ""Button"",
                    ""id"": ""f793486a-0d0a-4484-941c-62050b5718fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ba86f09-1f57-4177-8c81-7b10be35d73a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""2cc73bb9-f348-4547-a78d-993dc8fc0049"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0e87e661-490c-455a-aca4-33acd81e1757"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""52c711fa-f656-4ca6-9d06-a474bf4287ec"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8446cf45-4ac6-4d47-9efc-4edcaeff2387"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""80310905-4998-4d18-bdd3-999fa2a41307"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""15a9c2d0-abb1-4c26-805c-6241484232fa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae3c97e8-8d81-4da7-a21b-051a37b5fe32"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7ccaf24b-560a-4124-907c-c131762e7757"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6a050d59-66e2-4004-a1a5-7e8ed58b2cf4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5f3aaed9-d989-4666-94df-50ae35bb5df5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""76969cb5-3521-4a96-8e75-191424d5c968"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grabbing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d42786b5-cd77-4b1f-a8b9-2490ad668e7b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Taskbar Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7893abe3-afa1-42f2-982e-b46de68d614a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Taskbar Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f2cddc0-0f9b-4579-8a56-1440f5d0de75"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d33bb970-5fff-45e3-a68a-a977b3c1dbbc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""739113c5-f0fc-486d-bbce-088f12abb77c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c81f8d8-9ab0-4ee1-a0df-56d038fcffff"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tool"",
            ""id"": ""78368c1c-0c64-4c6a-9cce-369bf54ed350"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e4a26001-cb55-4db2-a0de-0203ac39baf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""3c90f1d5-4bb1-4329-b92d-eb722a4f72e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""fc3d1412-5281-4a0d-bb0e-9210bcea9163"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03d2a951-c00b-479f-8c3c-e5ccda627c40"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0fb69e5-b6e2-4b74-adbb-9afb127a6e82"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e31dc4c-2683-4d5b-b9e4-dd51760ab866"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause Menu"",
            ""id"": ""b04c7264-9861-4e6c-bc49-3d94ac787ed5"",
            ""actions"": [
                {
                    ""name"": ""Back out of menu"",
                    ""type"": ""Button"",
                    ""id"": ""75ef68e8-9fea-4731-b6b5-e3a7345f027d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f37e0b8-2690-4d79-88f2-888de43ae800"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back out of menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Grabbing = m_Player.FindAction("Grabbing", throwIfNotFound: true);
        m_Player_ButtonPress = m_Player.FindAction("Button Press", throwIfNotFound: true);
        m_Player_TaskbarScroll = m_Player.FindAction("Taskbar Scroll", throwIfNotFound: true);
        m_Player_TaskbarRelease = m_Player.FindAction("Taskbar Release", throwIfNotFound: true);
        m_Player_CameraMovement = m_Player.FindAction("Camera Movement", throwIfNotFound: true);
        m_Player_OpenPauseMenu = m_Player.FindAction("Open Pause Menu", throwIfNotFound: true);
        // Tool
        m_Tool = asset.FindActionMap("Tool", throwIfNotFound: true);
        m_Tool_Shoot = m_Tool.FindAction("Shoot", throwIfNotFound: true);
        m_Tool_Reload = m_Tool.FindAction("Reload", throwIfNotFound: true);
        m_Tool_Aim = m_Tool.FindAction("Aim", throwIfNotFound: true);
        // Pause Menu
        m_PauseMenu = asset.FindActionMap("Pause Menu", throwIfNotFound: true);
        m_PauseMenu_Backoutofmenu = m_PauseMenu.FindAction("Back out of menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Grabbing;
    private readonly InputAction m_Player_ButtonPress;
    private readonly InputAction m_Player_TaskbarScroll;
    private readonly InputAction m_Player_TaskbarRelease;
    private readonly InputAction m_Player_CameraMovement;
    private readonly InputAction m_Player_OpenPauseMenu;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Grabbing => m_Wrapper.m_Player_Grabbing;
        public InputAction @ButtonPress => m_Wrapper.m_Player_ButtonPress;
        public InputAction @TaskbarScroll => m_Wrapper.m_Player_TaskbarScroll;
        public InputAction @TaskbarRelease => m_Wrapper.m_Player_TaskbarRelease;
        public InputAction @CameraMovement => m_Wrapper.m_Player_CameraMovement;
        public InputAction @OpenPauseMenu => m_Wrapper.m_Player_OpenPauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Grabbing.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrabbing;
                @Grabbing.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrabbing;
                @Grabbing.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrabbing;
                @ButtonPress.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonPress;
                @ButtonPress.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonPress;
                @ButtonPress.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonPress;
                @TaskbarScroll.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskbarScroll;
                @TaskbarScroll.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskbarScroll;
                @TaskbarScroll.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskbarScroll;
                @TaskbarRelease.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskbarRelease;
                @TaskbarRelease.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskbarRelease;
                @TaskbarRelease.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskbarRelease;
                @CameraMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCameraMovement;
                @OpenPauseMenu.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpenPauseMenu;
                @OpenPauseMenu.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpenPauseMenu;
                @OpenPauseMenu.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpenPauseMenu;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Grabbing.started += instance.OnGrabbing;
                @Grabbing.performed += instance.OnGrabbing;
                @Grabbing.canceled += instance.OnGrabbing;
                @ButtonPress.started += instance.OnButtonPress;
                @ButtonPress.performed += instance.OnButtonPress;
                @ButtonPress.canceled += instance.OnButtonPress;
                @TaskbarScroll.started += instance.OnTaskbarScroll;
                @TaskbarScroll.performed += instance.OnTaskbarScroll;
                @TaskbarScroll.canceled += instance.OnTaskbarScroll;
                @TaskbarRelease.started += instance.OnTaskbarRelease;
                @TaskbarRelease.performed += instance.OnTaskbarRelease;
                @TaskbarRelease.canceled += instance.OnTaskbarRelease;
                @CameraMovement.started += instance.OnCameraMovement;
                @CameraMovement.performed += instance.OnCameraMovement;
                @CameraMovement.canceled += instance.OnCameraMovement;
                @OpenPauseMenu.started += instance.OnOpenPauseMenu;
                @OpenPauseMenu.performed += instance.OnOpenPauseMenu;
                @OpenPauseMenu.canceled += instance.OnOpenPauseMenu;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Tool
    private readonly InputActionMap m_Tool;
    private IToolActions m_ToolActionsCallbackInterface;
    private readonly InputAction m_Tool_Shoot;
    private readonly InputAction m_Tool_Reload;
    private readonly InputAction m_Tool_Aim;
    public struct ToolActions
    {
        private @PlayerInputActions m_Wrapper;
        public ToolActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Tool_Shoot;
        public InputAction @Reload => m_Wrapper.m_Tool_Reload;
        public InputAction @Aim => m_Wrapper.m_Tool_Aim;
        public InputActionMap Get() { return m_Wrapper.m_Tool; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToolActions set) { return set.Get(); }
        public void SetCallbacks(IToolActions instance)
        {
            if (m_Wrapper.m_ToolActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_ToolActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ToolActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ToolActionsCallbackInterface.OnShoot;
                @Reload.started -= m_Wrapper.m_ToolActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_ToolActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_ToolActionsCallbackInterface.OnReload;
                @Aim.started -= m_Wrapper.m_ToolActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_ToolActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_ToolActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_ToolActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public ToolActions @Tool => new ToolActions(this);

    // Pause Menu
    private readonly InputActionMap m_PauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_PauseMenu_Backoutofmenu;
    public struct PauseMenuActions
    {
        private @PlayerInputActions m_Wrapper;
        public PauseMenuActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Backoutofmenu => m_Wrapper.m_PauseMenu_Backoutofmenu;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @Backoutofmenu.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnBackoutofmenu;
                @Backoutofmenu.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnBackoutofmenu;
                @Backoutofmenu.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnBackoutofmenu;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Backoutofmenu.started += instance.OnBackoutofmenu;
                @Backoutofmenu.performed += instance.OnBackoutofmenu;
                @Backoutofmenu.canceled += instance.OnBackoutofmenu;
            }
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnGrabbing(InputAction.CallbackContext context);
        void OnButtonPress(InputAction.CallbackContext context);
        void OnTaskbarScroll(InputAction.CallbackContext context);
        void OnTaskbarRelease(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnOpenPauseMenu(InputAction.CallbackContext context);
    }
    public interface IToolActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnBackoutofmenu(InputAction.CallbackContext context);
    }
}
